install.packages("~/Downloads/SDSFoundations_1.4.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/SDSFoundations_1.4.tgz", repos = NULL, type = .Platform$pkgType)
mtcars
x <- 6+2
x
z <- c(2,4,6,8,10)
z!=10
Bikedata
bikedata
BikeData
library(SDSFoundations)
bike <- BikeData
bike
bike$age
bike$age[7]
table(bike$cyc_freq[1:10])
bike$gender=='f',
bike$gender=='F',
t<-bike$gender=='F',
t<-(bike$gender=='F',)
t<-[bike$gender=='F',]
t<-bike[bike$gender=='F',]
t
t<-bike[bike$gender=='F',][1]
t
t<-bike[bike$gender=='F',]
t
table(bike$student)
distance <-student$distance
student <- bike[bike$student==1,]
distance <-student$distance
distance
distance.type
#Read in the dataset and name it bike
bike<-BikeData
#Create a vector of the times
rider_times<-bike$times
#Check the contents of our rider_times vector
rider_times
bike
table(bike$student)
View(bike)
table(student$cyc_freq)
student
mean(student$distance)
males <- bike [bike$gender == 'M',]
males
table(bike$cyc_freq)
table(bike$gender)
males = bike[bike$gender=='M']
males = bike[bike$gender=='M',]
table(males$cyc_freq)
bike[bike$age(table(bike$cyc_freq))]
bike[bike$age]
bike$age
bike[bike$age=='Daily']
t=bike[bike$age=='Daily']
t
t=bike[bike$cyc_freq=='Daily']
t=bike[bike$cyc_freq=='Daily',]
t
mean(t$age)
female <- table(bike$gender)
female
female <- table(bike$gender,)
female <- bike(bike$gender=='F',)
female <- bike(bike$gender=='F',)
female <- bike[bike$gender=='F',]
table(female$cyc_freq)
female
avg_age<- mean(female[female$cyc_freq=='Daily',]$age)
avg_age
male <- bike[bike$gender=='M',]
mean(male[male$cyc_freq=='Daily',]$age)
table(male$age>30)
male[male$cyc_freq=='Daily',]$age>30
table(male[male$cyc_freq=='Daily',]$age>30)
table(male[male$cyc_freq=='Daily',]$age>=30)
bike
table(bike$cyc_freq)
table(bike[bike$gender=='M',])
(bike[bike$gender=='M',])
t=bike[bike$gender=='M',]
table(t$cyc_freq)
AnimalData
hist(AnimalData[AnimalData$Animal.Type=='Cat'])
hist(AnimalData[AnimalData$Animal.Type=='Cat',]$Weight)
AnimalData
AnimalData$Animal.Type=='Cat'
AnimalData[AnimalData$Animal.Type=='Cat',]
hist(AnimalData[AnimalData$Animal.Type=='Cat',]$Days.Shelter)
median(AnimalData[AnimalData$Animal.Type=='Cat',]$Days.Shelter)
median(AnimalData[AnimalData$Animal.Type=='Cat',]$Weight)
mean(AnimalData[AnimalData$Animal.Type=='Cat',]$Weight)
sd(AnimalData[AnimalData$Animal.Type=='Cat',]$Weight)
(AnimalData[AnimalData$Animal.Type=='Cat',]$Weight)
13-mean(AnimalData[AnimalData$Animal.Type=='Cat',]$Weight)
sd(AnimalData[AnimalData$Animal.Type=='Cat',]$Weight)
8.89/3.35
8.897253/3.359524
mean(AnimalData[AnimalData$Animal.Type=='Cat',]$Weight)
1-pnorm(2.3)
IQR(AnimalData[AnimalData$Animal.Type=='Dog',]$Weight)
fivenum(AnimalData[AnimalData$Animal.Type=='Dog',]$Weight)
AnimalData[AnimalData$Animal.Type=='Dog',]$Weight > 13
table(AnimalData[AnimalData$Animal.Type=='Dog',]$Weight > 13)
202/(202+89)
fivenum(AnimalData[AnimalData$Animal.Type=='Cat',]$Weight))
fivenum(AnimalData[AnimalData$Animal.Type=='Cat',]$Weight)
AnimalData
animaldata <- AnimalData
View(animaldata)
median(animaldata[animaldata$Animal.Type=='Cat',]))
median(animaldata[animaldata$Animal.Type=='Cat',])
animaldata[animaldata$Animal.Type=='Cat',]
median(animaldata[animaldata$Animal.Type=='Cat',]$Weight)
mean(animaldata[animaldata$Animal.Type=='Cat',]$Weight)
sd(animaldata[animaldata$Animal.Type=='Cat',]$Weight)
fivenum(animaldata[animaldata$Animal.Type=='Cat',]$Weight)
hist(AnimalData[AnimalData$Animal.Type=='Dog',]$Days.Shelter)
hist(AnimalData[AnimalData$Animal.Type=='Dog',]$Weight)
median(AnimalData[AnimalData$Animal.Type=='Dog',]$Weight)
max(AnimalData[AnimalData$Animal.Type=='Dog',]$Weight)
median(AnimalData[AnimalData$Animal.Type=='Cat',]$Weight)
table(animaldata$Intake.Type)
129/(130+23+320)
table(animaldata[animaldata$Intake.Type=='Owner Surrender',]$animaldata$Outcome.Type)
animaldata[animaldata$Intake.Type=='Owner Surrender',]
dogs=animaldata$Animal.Type=='Dog'
dogs
dogs=animaldata[animaldata$Animal.Type=='Dog',]
dogs
dogs[dogs$Intake.Type=='Owner Surrender']
dogs[dogs$Intake.Type=='Owner Surrender',]
table(dogs[dogs$Intake.Type=='Owner Surrender',]$Outcome.Type)
which(dogs[dogs$Intake.Type=='Owner Surrender',]$Outcome.Type)
which(dogs[dogs$Intake.Type=='Owner Surrender',]$Outcome.Type=='Return to Owner')
dogs$Weight[7]
dogs$Weight[22]+dogs$Weight[7]
59.3/2
library("nnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("nnet")
round(abs(mean(split(mtcars, mtcars$cyl)$'4'$hp) - mean(split(mtcars, mtcars$cyl)$'8'$hp)))
apply(iris[, 1:4], 2, mean)
mu1 <- 0.4216469
# TDC_lms$sigmaFun(16)
sigma1 <- 0.05734794
# TDC_lms$nuFun(16)
nu1 <- -6.731475
#ASD_lms$muFun(16)
mu2<- 0.4226464
#ASD_lms$sigmaFun(16)
sigma2<- 0.03943504
#ASD_lms$nuFun(16)
nu2 <-5.157118
wass2(mu1, sigma1, nu1, mu2, sigma2, nu2)
wass2 <- function(mu1, sigma1, nu1, mu2, sigma2, nu2) {
qfunc1 <- quantile.bcn(mu1, sigma1, nu1)
qfunc2 <- quantile.bcn(mu2, sigma2, nu2)
diff.squared <- function(x) (qfunc1(x) - qfunc2(x)) ^2
return(sqrt(integrate(diff.squared, 0, 1)$value))
}
test <- wass2(mu1, sigma1, nu1, mu2, sigma2, nu2)
quantile.bcn <- function(mu, sigma, nu) {
if (nu==0) return(function(x) mu * exp(sigma * qnorm(x)))
else return(function(x) mu * (1+ nu*sigma*qnorm(x)) ^ (1/nu))
}
test <- wass2(mu1, sigma1, nu1, mu2, sigma2, nu2)
quantile.bcn <- function(mu, sigma, nu) {
if (nu==0) return(function(x) mu * exp(sigma * qnorm(x)))
else return(function(x) mu * (1+ nu*sigma*qnorm(x)) ^ (1/nu))
}
wass2 <- function(mu1, sigma1, nu1, mu2, sigma2, nu2) {
qfunc1 <- quantile.bcn(mu1, sigma1, nu1)
qfunc2 <- quantile.bcn(mu2, sigma2, nu2)
diff.squared <- function(x) (qfunc1(x) - qfunc2(x)) ^2
return(sqrt(integrate(diff.squared, 0, 10)$value))
}
test <- wass2(mu1, sigma1, nu1, mu2, sigma2, nu2)
quantile.bcn <- function(mu, sigma, nu) {
if (nu==0) return(function(x) mu * exp(sigma * qnorm(x)))
else return(function(x) mu * (1+ nu*sigma*qnorm(x)) ^ (1/nu))
}
wass2 <- function(mu1, sigma1, nu1, mu2, sigma2, nu2) {
qfunc1 <- quantile.bcn(mu1, sigma1, nu1)
qfunc2 <- quantile.bcn(mu2, sigma2, nu2)
diff.squared <- function(x) (qfunc1(x) - qfunc2(x)) ^2
return(sqrt(integrate(diff.squared, 0, 1)$value))
}
test <- wass2(mu1, sigma1, nu1, mu2, sigma2, nu2)
test <- wass2(1,1,1,0.5,2,2)
test <- quantile.bcn(mu1, sigma1, nu1)
test()
test(2)
test(x)
test(19)
test <- quantile.bcn(2,3,4)
test()
test(6)
file <- download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv')
file <- download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv',destfile = 'survey.csv')
file <-read.csv('file.csv')
file <-read.csv('survey.csv')
view(file)
file
View(file)
vec <- file[file$ACR =3 & file$AGS =6]
vec <- file[file$ACR==3 & file$AGS ==6]
vec <- file[file$ACR==3 & file$AGS ==6,]
vec
vec <- [file$ACR==3 & file$AGS ==6]
vec <- file$ACR==3 & file$AGS ==6
vec
agricultureLogical <- file$ACR==3 & file$AGS ==6
which(agricultureLogical,useNames = TRUE)
install.packages("jpeg")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg',destfile ='pic.jpg')
dat <-jpeg('pic.jpg')
?quantile()
?jpeg
dat <-jpeg(filename = 'pic.jpg')
dat <img <- readJPEG(filename = 'pic.jpg', native = TRUE)
library(jpeg)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv',destfile = 'survey.csv')
file <-read.csv('survey.csv')
agricultureLogical <- file$ACR==3 & file$AGS ==6
which(agricultureLogical,useNames = TRUE)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg',destfile ='pic.jpg')
dat <img <- readJPEG(filename = 'pic.jpg', native = TRUE)
img <- readJPEG(filename = 'pic.jpg', native = TRUE)
img <- readJPEG('pic.jpg', native = TRUE)
quantile(img)
quantile(img,c(0.3,0.8))
write.table(tidy_data, file = "./tidyData.txt",row.name=FALSE)
source('~/Dropbox/DataScience/Coursera/gettingAndCleaningdata/run_analysis.R')
source('~/Dropbox/DataScience/Coursera/gettingAndCleaningdata/run_analysis.R')
id_labels   = c("Subject", "activityLabel")
meltData      = melt(finalData, id = id_labels, measure.vars = features)
tidyData   = dcast(meltData, Subject + activityLabel ~ variable, mean)
write.table(tidyData, file = "./tidyData.txt",row.name=FALSE)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
